import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

public class MotorPHApp extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private Connection conn;

    public MotorPHApp() {
        setTitle("MotorPH Employee Management");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(800, 500);
        setLocationRelativeTo(null);

        connectDatabase(); // Initialize database connection

        JPanel panel = new JPanel(new BorderLayout());

        tableModel = new DefaultTableModel(new String[]{"Employee Number", "Last Name", "First Name", "Salary"}, 0);
        employeeTable = new JTable(tableModel);

        loadEmployees(); // Load employee data at startup

        JScrollPane scrollPane = new JScrollPane(employeeTable);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("New Employee");
        JButton viewButton = new JButton("View Employee");
        JButton refreshButton = new JButton("Refresh");

        buttonPanel.add(addButton);
        buttonPanel.add(viewButton);
        buttonPanel.add(refreshButton);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        add(panel);

        addButton.addActionListener(e -> openAddDialog());
        refreshButton.addActionListener(e -> loadEmployees());
        viewButton.addActionListener(e -> viewEmployeeDetails());
    }

    private void connectDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:motorph.db");
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("CREATE TABLE IF NOT EXISTS employees (id TEXT PRIMARY KEY, lastName TEXT, firstName TEXT, salary REAL)");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void openAddDialog() {
        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        JTextField idField = new JTextField();
        JTextField lastNameField = new JTextField();
        JTextField firstNameField = new JTextField();
        JTextField salaryField = new JTextField();

        inputPanel.add(new JLabel("Employee Number:")); inputPanel.add(idField);
        inputPanel.add(new JLabel("Last Name:")); inputPanel.add(lastNameField);
        inputPanel.add(new JLabel("First Name:")); inputPanel.add(firstNameField);
        inputPanel.add(new JLabel("Salary:")); inputPanel.add(salaryField);

        int result = JOptionPane.showConfirmDialog(this, inputPanel, "New Employee", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                String id = idField.getText().trim();
                String lastName = lastNameField.getText().trim();
                String firstName = firstNameField.getText().trim();
                double salary = Double.parseDouble(salaryField.getText().trim());

                if (id.isEmpty() || lastName.isEmpty() || firstName.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "All fields must be filled.", "Validation Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                PreparedStatement pstmt = conn.prepareStatement("INSERT INTO employees VALUES (?, ?, ?, ?)");
                pstmt.setString(1, id);
                pstmt.setString(2, lastName);
                pstmt.setString(3, firstName);
                pstmt.setDouble(4, salary);
                pstmt.executeUpdate();

                loadEmployees();
            } catch (SQLException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error adding employee: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void viewEmployeeDetails() {
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an employee to view.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String empId = tableModel.getValueAt(selectedRow, 0).toString();
        String lastName = tableModel.getValueAt(selectedRow, 1).toString();
        String firstName = tableModel.getValueAt(selectedRow, 2).toString();
        double salary = Double.parseDouble(tableModel.getValueAt(selectedRow, 3).toString());

        JFrame detailFrame = new JFrame("Employee Details");
        detailFrame.setSize(400, 300);
        detailFrame.setLayout(new BorderLayout());

        JTextArea detailsArea = new JTextArea();
        detailsArea.setEditable(false);
        detailsArea.append("Employee Number: " + empId + "\n");
        detailsArea.append("Last Name: " + lastName + "\n");
        detailsArea.append("First Name: " + firstName + "\n");
        detailsArea.append("Salary: PHP " + salary + "\n\n");

        JComboBox<String> monthCombo = new JComboBox<>(new String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"});
        JButton computeBtn = new JButton("Compute Salary");
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.add(new JLabel("Select Month:"));
        bottomPanel.add(monthCombo);
        bottomPanel.add(computeBtn);

        computeBtn.addActionListener(e -> {
            String month = monthCombo.getSelectedItem().toString();
            computeSalary(empId, month, salary);
        });

        detailFrame.add(new JScrollPane(detailsArea), BorderLayout.CENTER);
        detailFrame.add(bottomPanel, BorderLayout.SOUTH);
        detailFrame.setVisible(true);
    }

    private void computeSalary(String employeeId, String month, double baseSalary) {
        double deductions = baseSalary * 0.1;
        double netSalary = baseSalary - deductions;

        JOptionPane.showMessageDialog(this, "Salary for " + month + ":\nBase Salary: PHP " + baseSalary + "\nNet Salary: PHP " + netSalary);
    }

    private void loadEmployees() {
        SwingWorker<Void, String[]> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                List<String[]> rows = new ArrayList<>();
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT * FROM employees")) {
                    while (rs.next()) {
                        rows.add(new String[]{rs.getString("id"), rs.getString("lastName"), rs.getString("firstName"), String.valueOf(rs.getDouble("salary"))});
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(MotorPHApp.this, "Error loading employee data.", "File Error", JOptionPane.ERROR_MESSAGE);
                }
                publish(rows.toArray(new String[0][]));
                return null;
            }

            @Override
            protected void process(List<String[]> chunks) {
                tableModel.setRowCount(0);
                for (String[] row : chunks) {
                    tableModel.addRow(row);
                }
            }
        };
        worker.execute();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MotorPHApp().setVisible(true));
    }
}

