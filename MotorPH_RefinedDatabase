import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

public class MotorPHApp extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private Connection conn;

    // Minimum hourly wage threshold (adjustable)
    private static final double MIN_SALARY = 76.25;

    public MotorPHApp() {
        setTitle("MotorPH Employee Management");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(800, 500);
        setLocationRelativeTo(null);

        initDatabaseConnection();

        // Table model
        tableModel = new DefaultTableModel(new String[]{"Employee Number", "Last Name", "First Name", "Salary"}, 0);
        employeeTable = new JTable(tableModel);
        add(new JScrollPane(employeeTable), BorderLayout.CENTER);

        // Buttons
        JButton addButton = new JButton("New Employee");
        JButton viewButton = new JButton("View Employee");
        JButton deleteButton = new JButton("Delete Employee");
        JButton refreshButton = new JButton("Refresh");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(viewButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(refreshButton);
        add(buttonPanel, BorderLayout.SOUTH);

        // Button actions
        addButton.addActionListener(e -> openAddDialog());
        viewButton.addActionListener(e -> viewEmployeeDetails());
        deleteButton.addActionListener(e -> deleteSelectedEmployee());
        refreshButton.addActionListener(e -> loadEmployees());

        loadEmployees();
    }

    private void initDatabaseConnection() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:motorph.db");
            try (Statement stmt = conn.createStatement()) {
                stmt.executeUpdate("CREATE TABLE IF NOT EXISTS employees (" +
                        "id TEXT PRIMARY KEY, " +
                        "lastName TEXT NOT NULL, " +
                        "firstName TEXT NOT NULL, " +
                        "salary REAL NOT NULL CHECK (salary >= " + MIN_SALARY + "))");
            }
        } catch (SQLException e) {
            showError("Database initialization failed: " + e.getMessage());
        }
    }

    private void openAddDialog() {
        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        JTextField idField = new JTextField();
        JTextField lastNameField = new JTextField();
        JTextField firstNameField = new JTextField();
        JTextField salaryField = new JTextField();

        inputPanel.add(new JLabel("Employee Number:"));
        inputPanel.add(idField);
        inputPanel.add(new JLabel("Last Name:"));
        inputPanel.add(lastNameField);
        inputPanel.add(new JLabel("First Name:"));
        inputPanel.add(firstNameField);
        inputPanel.add(new JLabel("Salary:"));
        inputPanel.add(salaryField);

        int result = JOptionPane.showConfirmDialog(this, inputPanel, "New Employee", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String id = idField.getText().trim();
            String last = lastNameField.getText().trim();
            String first = firstNameField.getText().trim();
            String salaryText = salaryField.getText().trim();

            // Input validation
            if (!id.matches("\\d+")) {
                showError("Employee number must be numeric.");
                return;
            }
            if (!last.matches("[A-Za-z]+") || !first.matches("[A-Za-z]+")) {
                showError("Names must only contain letters.");
                return;
            }
            double salary;
            try {
                salary = Double.parseDouble(salaryText);
                if (salary < MIN_SALARY) {
                    showError("Salary must be at least â‚±" + MIN_SALARY);
                    return;
                }
            } catch (NumberFormatException ex) {
                showError("Salary must be numeric.");
                return;
            }

            // Insert with transaction rollback
            try {
                conn.setAutoCommit(false);
                try (PreparedStatement pstmt = conn.prepareStatement("INSERT INTO employees VALUES (?, ?, ?, ?)")) {
                    pstmt.setString(1, id);
                    pstmt.setString(2, last);
                    pstmt.setString(3, first);
                    pstmt.setDouble(4, salary);
                    pstmt.executeUpdate();
                }
                conn.commit();
                showInfo("Employee added.");
                loadEmployees();
            } catch (SQLException e) {
                try { conn.rollback(); } catch (SQLException ignored) {}
                showError("Add failed: " + e.getMessage());
            } finally {
                try { conn.setAutoCommit(true); } catch (SQLException ignored) {}
            }
        }
    }

    private void viewEmployeeDetails() {
        int row = employeeTable.getSelectedRow();
        if (row == -1) {
            showError("Please select an employee to view.");
            return;
        }

        String id = tableModel.getValueAt(row, 0).toString();
        String last = tableModel.getValueAt(row, 1).toString();
        String first = tableModel.getValueAt(row, 2).toString();
        String salary = tableModel.getValueAt(row, 3).toString();

        JTextArea detail = new JTextArea();
        detail.setText("Employee No: " + id + "\nLast Name: " + last +
                "\nFirst Name: " + first + "\nSalary: PHP " + salary);
        detail.setEditable(false);

        JOptionPane.showMessageDialog(this, detail, "Employee Details", JOptionPane.INFORMATION_MESSAGE);
    }

    private void deleteSelectedEmployee() {
        int row = employeeTable.getSelectedRow();
        if (row == -1) {
            showError("Select an employee to delete.");
            return;
        }

        String id = tableModel.getValueAt(row, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(this,
                "Delete employee ID " + id + "?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM employees WHERE id = ?")) {
                stmt.setString(1, id);
                stmt.executeUpdate();
                showInfo("Employee deleted.");
                loadEmployees();
            } catch (SQLException e) {
                showError("Delete failed: " + e.getMessage());
            }
        }
    }

    private void loadEmployees() {
        tableModel.setRowCount(0);
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM employees")) {
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getString("id"),
                        rs.getString("lastName"),
                        rs.getString("firstName"),
                        rs.getDouble("salary")
                });
            }
        } catch (SQLException e) {
            showError("Loading failed: " + e.getMessage());
        }
    }

    private void showError(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showInfo(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Notice", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MotorPHApp().setVisible(true));
    }
}

