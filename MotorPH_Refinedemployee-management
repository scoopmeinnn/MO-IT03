import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;

public class MotorPHValidatedEmployeeApp {
    private JFrame frame;
    private JTextField empNoField, firstNameField, lastNameField, birthdayField, rateField, searchField;
    private JTextArea displayArea;
    private Connection conn;
    private final double MIN_HOURLY_RATE = 76.25;

    public MotorPHValidatedEmployeeApp() {
        frame = new JFrame("MotorPH Employee Management");
        frame.setSize(500, 550);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        initDatabase();

        // Input Panel
        JPanel inputPanel = new JPanel(new GridLayout(6, 2, 5, 5));
        empNoField = new JTextField();
        firstNameField = new JTextField();
        lastNameField = new JTextField();
        birthdayField = new JTextField();
        rateField = new JTextField();
        searchField = new JTextField();

        inputPanel.add(new JLabel("Employee No:"));
        inputPanel.add(empNoField);
        inputPanel.add(new JLabel("First Name:"));
        inputPanel.add(firstNameField);
        inputPanel.add(new JLabel("Last Name:"));
        inputPanel.add(lastNameField);
        inputPanel.add(new JLabel("Birthday (YYYY-MM-DD):"));
        inputPanel.add(birthdayField);
        inputPanel.add(new JLabel("Hourly Rate:"));
        inputPanel.add(rateField);
        inputPanel.add(new JLabel("Search by ID:"));
        inputPanel.add(searchField);

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton addBtn = new JButton("Add");
        JButton updateBtn = new JButton("Update");
        JButton deleteBtn = new JButton("Delete");
        JButton viewBtn = new JButton("View All");
        JButton searchBtn = new JButton("Search");

        addBtn.addActionListener(e -> addEmployee());
        updateBtn.addActionListener(e -> updateEmployee());
        deleteBtn.addActionListener(e -> deleteEmployee());
        viewBtn.addActionListener(e -> displayEmployees());
        searchBtn.addActionListener(e -> searchEmployee());

        buttonPanel.add(addBtn);
        buttonPanel.add(updateBtn);
        buttonPanel.add(deleteBtn);
        buttonPanel.add(viewBtn);
        buttonPanel.add(searchBtn);

        // Display
        displayArea = new JTextArea(12, 40);
        displayArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(displayArea);

        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(inputPanel, BorderLayout.NORTH);
        topPanel.add(buttonPanel, BorderLayout.SOUTH);

        frame.add(topPanel, BorderLayout.NORTH);
        frame.add(scroll, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    private void initDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:employees.db");
            try (Statement stmt = conn.createStatement()) {
                stmt.execute("CREATE TABLE IF NOT EXISTS employees (" +
                        "emp_no INTEGER PRIMARY KEY, " +
                        "first_name TEXT NOT NULL, " +
                        "last_name TEXT NOT NULL, " +
                        "birthday TEXT NOT NULL, " +
                        "hourly_rate REAL NOT NULL)");
            }
        } catch (SQLException e) {
            showError("Database error: " + e.getMessage());
        }
    }

    private boolean validateInputs() {
        try {
            if (!empNoField.getText().matches("\\d+"))
                throw new IllegalArgumentException("Employee number must be numeric.");
            if (!firstNameField.getText().matches("[A-Za-z]+"))
                throw new IllegalArgumentException("First name must contain letters only.");
            if (!lastNameField.getText().matches("[A-Za-z]+"))
                throw new IllegalArgumentException("Last name must contain letters only.");
            LocalDate.parse(birthdayField.getText()); // validate date
            double rate = Double.parseDouble(rateField.getText());
            if (rate < MIN_HOURLY_RATE)
                throw new IllegalArgumentException("Hourly rate must be at least ₱" + MIN_HOURLY_RATE);
        } catch (IllegalArgumentException | DateTimeParseException e) {
            showError(e.getMessage());
            return false;
        }
        return true;
    }

    private void addEmployee() {
        if (!validateInputs()) return;

        try (PreparedStatement stmt = conn.prepareStatement(
                "INSERT INTO employees (emp_no, first_name, last_name, birthday, hourly_rate) VALUES (?, ?, ?, ?, ?)")) {
            stmt.setInt(1, Integer.parseInt(empNoField.getText()));
            stmt.setString(2, firstNameField.getText());
            stmt.setString(3, lastNameField.getText());
            stmt.setString(4, birthdayField.getText());
            stmt.setDouble(5, Double.parseDouble(rateField.getText()));
            stmt.executeUpdate();
            showSuccess("Employee added.");
            displayEmployees();
        } catch (SQLException e) {
            showError("Add failed: " + e.getMessage());
        }
    }

    private void updateEmployee() {
        if (!validateInputs()) return;

        try (PreparedStatement stmt = conn.prepareStatement(
                "UPDATE employees SET first_name=?, last_name=?, birthday=?, hourly_rate=? WHERE emp_no=?")) {
            stmt.setString(1, firstNameField.getText());
            stmt.setString(2, lastNameField.getText());
            stmt.setString(3, birthdayField.getText());
            stmt.setDouble(4, Double.parseDouble(rateField.getText()));
            stmt.setInt(5, Integer.parseInt(empNoField.getText()));
            int rows = stmt.executeUpdate();
            if (rows > 0) {
                showSuccess("Employee updated.");
            } else {
                showError("No employee found with that number.");
            }
            displayEmployees();
        } catch (SQLException e) {
            showError("Update failed: " + e.getMessage());
        }
    }

    private void deleteEmployee() {
        if (!empNoField.getText().matches("\\d+")) {
            showError("Enter a valid employee number.");
            return;
        }
        try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM employees WHERE emp_no=?")) {
            stmt.setInt(1, Integer.parseInt(empNoField.getText()));
            int rows = stmt.executeUpdate();
            if (rows > 0) {
                showSuccess("Employee deleted.");
            } else {
                showError("Employee not found.");
            }
            displayEmployees();
        } catch (SQLException e) {
            showError("Delete failed: " + e.getMessage());
        }
    }

    private void displayEmployees() {
        displayArea.setText("Emp No | Name | Birthday | Hourly Rate\n------------------------------------------\n");
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM employees")) {
            while (rs.next()) {
                displayArea.append(rs.getInt("emp_no") + " | "
                        + rs.getString("first_name") + " " + rs.getString("last_name") + " | "
                        + rs.getString("birthday") + " | ₱"
                        + rs.getDouble("hourly_rate") + "\n");
            }
        } catch (SQLException e) {
            showError("Display failed: " + e.getMessage());
        }
    }

    private void searchEmployee() {
        if (!searchField.getText().matches("\\d+")) {
            showError("Enter a numeric employee ID.");
            return;
        }
        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM employees WHERE emp_no=?")) {
            stmt.setInt(1, Integer.parseInt(searchField.getText()));
            try (ResultSet rs = stmt.executeQuery()) {
                displayArea.setText("Emp No | Name | Birthday | Hourly Rate\n------------------------------------------\n");
                if (rs.next()) {
                    displayArea.append(rs.getInt("emp_no") + " | "
                            + rs.getString("first_name") + " " + rs.getString("last_name") + " | "
                            + rs.getString("birthday") + " | ₱"
                            + rs.getDouble("hourly_rate") + "\n");
                } else {
                    showError("No employee found.");
                }
            }
        } catch (SQLException e) {
            showError("Search failed: " + e.getMessage());
        }
    }

    private void showError(String msg) {
        JOptionPane.showMessageDialog(frame, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showSuccess(String msg) {
        JOptionPane.showMessageDialog(frame, msg, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MotorPHValidatedEmployeeApp::new);
    }
}
